{
  "print('Hello, world!')": "System.out.println(\"Hello, world!\");",
  "x = 5\nprint(x)": "int x = 5;\nSystem.out.println(x);",
  "for i in range(5):\n    print(i)": "for (int i = 0; i < 5; i++) {\n    System.out.println(i);\n}",
  "def add(a, b):\n    return a + b\nprint(add(3, 4))": "public static int add(int a, int b) {\n    return a + b;\n}\nSystem.out.println(add(3, 4));",
  "if x > 0:\n    print('Positive')\nelif x < 0:\n    print('Negative')\nelse:\n    print('Zero')": "if (x > 0) {\n    System.out.println(\"Positive\");\n} else if (x < 0) {\n    System.out.println(\"Negative\");\n} else {\n    System.out.println(\"Zero\");\n}"

  "print('Python is fun!')": "System.out.println(\"Java is fun!\");",
  "x = 10\ny = 20\nprint(x + y)": "int x = 10;\nint y = 20;\nSystem.out.println(x + y);",
  "for i in range(1, 6):\n    print(i * i)": "for (int i = 1; i <= 5; i++) {\n    System.out.println(i * i);\n}",
  "def multiply(a, b):\n    return a * b\nprint(multiply(3, 4))": "public static int multiply(int a, int b) {\n    return a * b;\n}\nSystem.out.println(multiply(3, 4));",
  "if x % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')": "if (x % 2 == 0) {\n    System.out.println(\"Even\");\n} else {\n    System.out.println(\"Odd\");\n}",
  "s = 'Hello'\nprint(s[0])": "String s = \"Hello\";\nSystem.out.println(s.charAt(0));",
  "nums = [1, 2, 3, 4, 5]\nprint(nums)": "int[] nums = {1, 2, 3, 4, 5};\nSystem.out.println(Arrays.toString(nums));",
  "for num in nums:\n    print(num)": "for (int num : nums) {\n    System.out.println(num);\n}",
  "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))": "public static int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\nSystem.out.println(factorial(5));",
  "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nprint(fibonacci(6))": "public static int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\nSystem.out.println(fibonacci(6));",
  "def greet(name):\n    print('Hello, ' + name)\ngreet('Alice')": "public static void greet(String name) {\n    System.out.println(\"Hello, \" + name);\n}\ngreet(\"Alice\");",
  "squares = [i*i for i in range(5)]\nprint(squares)": "ArrayList<Integer> squares = new ArrayList<>();\nfor (int i = 0; i < 5; i++) {\n    squares.add(i * i);\n}\nSystem.out.println(squares);",
  "def average(nums):\n    return sum(nums) / len(nums)\nprint(average([1, 2, 3, 4, 5]))": "public static double average(int[] nums) {\n    int sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return (double) sum / nums.length;\n}\nSystem.out.println(average(new int[]{1, 2, 3, 4, 5}));",
  "colors = {'red': '#FF0000', 'green': '#00FF00', 'blue': '#0000FF'}\nprint(colors['green'])": "HashMap<String, String> colors = new HashMap<>();\ncolors.put(\"red\", \"#FF0000\");\ncolors.put(\"green\", \"#00FF00\");\ncolors.put(\"blue\", \"#0000FF\");\nSystem.out.println(colors.get(\"green\"));",
  "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def bark(self):\n        print('Woof!')\ndog1 = Dog('Buddy', 3)\nprint(dog1.name)": "class Dog {\n    String name;\n    int age;\n    public Dog(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public void bark() {\n        System.out.println(\"Woof!\");\n    }\n}\nDog dog1 = new Dog(\"Buddy\", 3);\nSystem.out.println(dog1.name);",
  "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_prime(11))": "public static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nSystem.out.println(isPrime(11));",
  "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\nprint(count_vowels('Hello World'))": "public static int countVowels(String s) {\n    String vowels = \"aeiouAEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (vowels.indexOf(s.charAt(i)) != -1) {\n            count++;\n        }\n    }\n    return count;\n}\nSystem.out.println(countVowels(\"Hello World\"));",
  "def reverse(s):\n    return s[::-1]\nprint(reverse('hello'))": "public static String reverse(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\nSystem.out.println(reverse(\"hello\"));",
  "def max_of_three(a, b, c):\n    return max(a, b, c)\nprint(max_of_three(3, 6, 2))": "public static int maxOfThree(int a, int b, int c) {\n    return Math.max(Math.max(a, b), c);\n}\nSystem.out.println(maxOfThree(3, 6, 2));",
  "def power(base, exponent):\n    return base ** exponent\nprint(power(2, 3))": "public static double power(double base, double exponent) {\n    return Math.pow(base, exponent);\n}\nSystem.out.println(power(2, 3));",
  "def unique_elements(lst):\n    return list(set(lst))\nprint(unique_elements([1, 2, 2, 3, 4, 4, 5]))": "public static ArrayList<Integer> uniqueElements(ArrayList<Integer> lst) {\n    return new ArrayList<>(new HashSet<>(lst));\n}\nSystem.out.println(uniqueElements(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5))));",
  "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))\nprint(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))": "public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> lst) {\n    return new ArrayList<>(new LinkedHashSet<>(lst));\n}\nSystem.out.println(removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5))));",
  "def lcm(x, y):\n    return x * y // gcd(x, y)\nprint(lcm(4, 6))": "public static int lcm(int x, int y) {\n    return x * y / gcd(x, y);\n}\nSystem.out.println(lcm(4, 6));",
  "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\nprint(gcd(12, 18))": "public static int gcd(int x, int y) {\n    while (y != 0) {\n        int temp = y;\n        y = x % y;\n        x = temp;\n    }\n    return x;\n}\nSystem.out.println(gcd(12, 18));",
  "def is_palindrome(s):\n    return s == s[::-1]\nprint(is_palindrome('radar'))": "public static boolean isPalindrome(String s) {\n    return s.equals(new StringBuilder(s).reverse().toString());\n}\nSystem.out.println(isPalindrome(\"radar\"));",
  "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\nprint(binary_search([1, 2, 3, 4, 5], 4))": "public static int binarySearch(int[] arr, int target) {\n    int low = 0;\n    int high = arr.length - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\nSystem.out.println(binarySearch(new int[]{1, 2, 3, 4, 5}, 4));",
  "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))": "public static int[] bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\nSystem.out.println(Arrays.toString(bubbleSort(new int[]{64, 34, 25, 12, 22, 11, 90})));",
  "def selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\nprint(selection_sort([64, 34, 25, 12, 22, 11, 90]))": "public static int[] selectionSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n; i++) {\n        int minIdx = i;\n        for (int j = i+1; j < n; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n            }\n        }\n        int temp = arr[i];\n        arr[i] = arr[minIdx];\n        arr[minIdx] = temp;\n    }\n    return arr;\n}\nSystem.out.println(Arrays.toString(selectionSort(new int[]{64, 34, 25, 12, 22, 11, 90})));",
  "def insertion_sort(arr):\n    n = len(arr)\n    for i in range(1, n):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\nprint(insertion_sort([64, 34, 25, 12, 22, 11, 90]))": "public static int[] insertionSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n    return arr;\n}\nSystem.out.println(Arrays.toString(insertionSort(new int[]{64, 34, 25, 12, 22, 11, 90})));",
  "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n    return arr\nprint(merge_sort([64, 34, 25, 12, 22, 11, 90]))": "public static void mergeSort(int[] arr, int l, int r) {\n    if (l < r) {\n        int mid = (l + r) / 2;\n        mergeSort(arr, l, mid);\n        mergeSort(arr, mid + 1, r);\n        merge(arr, l, mid, r);\n    }\n}\n\npublic static void merge(int[] arr, int l, int mid, int r) {\n    int n1 = mid - l + 1;\n    int n2 = r - mid;\n    int[] L = new int[n1];\n    int[] R = new int[n2];\n    for (int i = 0; i < n1; i++) {\n        L[i] = arr[l + i];\n    }\n    for (int j = 0; j < n2; j++) {\n        R[j] = arr[mid + 1 + j];\n    }\n    int i = 0, j = 0;\n    int k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nint[] arr = {64, 34, 25, 12, 22, 11, 90};\nmergeSort(arr, 0, arr.length - 1);\nSystem.out.println(Arrays.toString(arr));",
  "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\nprint(quick_sort([64, 34, 25, 12, 22, 11, 90]))": "public static int[] quickSort(int[] arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n    return arr;\n}\n\npublic static int partition(int[] arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}\n\nint[] arr = {64, 34, 25, 12, 22, 11, 90};\nquickSort(arr, 0, arr.length - 1);\nSystem.out.println(Arrays.toString(arr));",
  "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\nprint(linear_search([1, 2, 3, 4, 5], 4))": "public static int linearSearch(int[] arr, int target) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == target) {\n            return i;\n        }\n    }\n    return -1;\n}\nSystem.out.println(linearSearch(new int[]{1, 2, 3, 4, 5}, 4));",
  "def max_subarray_sum(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\nprint(max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))": "public static int maxSubarraySum(int[] arr) {\n    int maxSum = Integer.MIN_VALUE;\n    int currentSum = 0;\n    for (int num : arr) {\n        currentSum = Math.max(num, currentSum + num);\n        maxSum = Math.max(maxSum, currentSum);\n    }\n    return maxSum;\n}\nSystem.out.println(maxSubarraySum(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4}));",
  "def flatten(lst):\n    return [item for sublist in lst for item in sublist]\nprint(flatten([[1, 2], [3, 4], [5, 6]]))": "public static ArrayList<Integer> flatten(ArrayList<ArrayList<Integer>> lst) {\n    ArrayList<Integer> result = new ArrayList<>();\n    for (ArrayList<Integer> sublist : lst) {\n        result.addAll(sublist);\n    }\n    return result;\n}\nSystem.out.println(flatten(new ArrayList<>(Arrays.asList(\n        new ArrayList<>(Arrays.asList(1, 2)),\n        new ArrayList<>(Arrays.asList(3, 4)),\n        new ArrayList<>(Arrays.asList(5, 6))\n))));",
  "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\nprint(transpose([[1, 2, 3], [4, 5, 6]]))": "public static int[][] transpose(int[][] matrix) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[][] result = new int[n][m];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n    return result;\n}\nSystem.out.println(Arrays.deepToString(transpose(new int[][]{{1, 2, 3}, {4, 5, 6}})));",
  "def is_armstrong(n):\n    digits = [int(digit) for digit in str(n)]\n    num_digits = len(digits)\n    armstrong_sum = sum([digit ** num_digits for digit in digits])\n    return armstrong_sum == n\nprint(is_armstrong(153))": "public static boolean isArmstrong(int n) {\n    String strN = String.valueOf(n);\n    int numDigits = strN.length();\n    int armstrongSum = 0;\n    for (int i = 0; i < numDigits; i++) {\n        int digit = Character.getNumericValue(strN.charAt(i));\n        armstrongSum += Math.pow(digit, numDigits);\n    }\n    return armstrongSum == n;\n}\nSystem.out.println(isArmstrong(153));",
  "def is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\nprint(is_perfect_square(16))": "public static boolean isPerfectSquare(int n) {\n    return (int) Math.pow((int) Math.sqrt(n), 2) == n;\n}\nSystem.out.println(isPerfectSquare(16));",
  "def count_words(s):\n    words = s.split()\n    return len(words)\nprint(count_words('Hello World'))": "public static int countWords(String s) {\n    String[] words = s.split(\"\\\\s+\");\n    return words.length;\n}\nSystem.out.println(countWords(\"Hello World\"));"
  "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n    return arr\nprint(merge_sort([64, 34, 25, 12, 22, 11, 90]))": "public static void mergeSort(int[] arr, int l, int r) {\n    if (l < r) {\n        int mid = (l + r) / 2;\n        mergeSort(arr, l, mid);\n        mergeSort(arr, mid + 1, r);\n        merge(arr, l, mid, r);\n    }\n}\n\npublic static void merge(int[] arr, int l, int mid, int r) {\n    int n1 = mid - l + 1;\n    int n2 = r - mid;\n    int[] L = new int[n1];\n    int[] R = new int[n2];\n    for (int i = 0; i < n1; i++) {\n        L[i] = arr[l + i];\n    }\n    for (int j = 0; j < n2; j++) {\n        R[j] = arr[mid + 1 + j];\n    }\n    int i = 0, j = 0;\n    int k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nint[] arr = {64, 34, 25, 12, 22, 11, 90};\nmergeSort(arr, 0, arr.length - 1);\nSystem.out.println(Arrays.toString(arr));",
  "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\nprint(quick_sort([64, 34, 25, 12, 22, 11, 90]))": "public static int[] quickSort(int[] arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n    return arr;\n}\n\npublic static int partition(int[] arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}\n\nint[] arr = {64, 34, 25, 12, 22, 11, 90};\nquickSort(arr, 0, arr.length - 1);\nSystem.out.println(Arrays.toString(arr));",
  "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\nprint(linear_search([1, 2, 3, 4, 5], 4))": "public static int linearSearch(int[] arr, int target) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == target) {\n            return i;\n        }\n    }\n    return -1;\n}\nSystem.out.println(linearSearch(new int[]{1, 2, 3, 4, 5}, 4));",
  "def max_subarray_sum(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\nprint(max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))": "public static int maxSubarraySum(int[] arr) {\n    int maxSum = Integer.MIN_VALUE;\n    int currentSum = 0;\n    for (int num : arr) {\n        currentSum = Math.max(num, currentSum + num);\n        maxSum = Math.max(maxSum, currentSum);\n    }\n    return maxSum;\n}\nSystem.out.println(maxSubarraySum(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4}));",
  "def flatten(lst):\n    return [item for sublist in lst for item in sublist]\nprint(flatten([[1, 2], [3, 4], [5, 6]]))": "public static ArrayList<Integer> flatten(ArrayList<ArrayList<Integer>> lst) {\n    ArrayList<Integer> result = new ArrayList<>();\n    for (ArrayList<Integer> sublist : lst) {\n        result.addAll(sublist);\n    }\n    return result;\n}\nSystem.out.println(flatten(new ArrayList<>(Arrays.asList(\n        new ArrayList<>(Arrays.asList(1, 2)),\n        new ArrayList<>(Arrays.asList(3, 4)),\n        new ArrayList<>(Arrays.asList(5, 6))\n))));",
  "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\nprint(transpose([[1, 2, 3], [4, 5, 6]]))": "public static int[][] transpose(int[][] matrix) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[][] result = new int[n][m];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n    return result;\n}\nSystem.out.println(Arrays.deepToString(transpose(new int[][]{{1, 2, 3}, {4, 5, 6}})));",
  "def is_armstrong(n):\n    digits = [int(digit) for digit in str(n)]\n    num_digits = len(digits)\n    armstrong_sum = sum([digit ** num_digits for digit in digits])\n    return armstrong_sum == n\nprint(is_armstrong(153))": "public static boolean isArmstrong(int n) {\n    String strN = String.valueOf(n);\n    int numDigits = strN.length();\n    int armstrongSum = 0;\n    for (int i = 0; i < numDigits; i++) {\n        int digit = Character.getNumericValue(strN.charAt(i));\n        armstrongSum += Math.pow(digit, numDigits);\n    }\n    return armstrongSum == n;\n}\nSystem.out.println(isArmstrong(153));",
  "def is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\nprint(is_perfect_square(16))": "public static boolean isPerfectSquare(int n) {\n    return (int) Math.pow((int) Math.sqrt(n), 2) == n;\n}\nSystem.out.println(isPerfectSquare(16));",
  "def count_words(s):\n    words = s.split()\n    return len(words)\nprint(count_words('Hello World'))": "public static int countWords(String s) {\n    String[] words = s.split(\"\\\\s+\");\n    return words.length;\n}\nSystem.out.println(countWords(\"Hello World\"));",
  "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\nprint(is_anagram('listen', 'silent'))": "public static boolean isAnagram(String s1, String s2) {\n    char[] str1 = s1.toCharArray();\n    char[] str2 = s2.toCharArray();\n    Arrays.sort(str1);\n    Arrays.sort(str2);\n    return Arrays.equals(str1, str2);\n}\nSystem.out.println(isAnagram(\"listen\", \"silent\"));",
  "def find_missing_number(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum\nprint(find_missing_number([1, 2, 4, 5, 6]))": "public static int findMissingNumber(int[] nums) {\n    int n = nums.length + 1;\n    int totalSum = n * (n + 1) / 2;\n    int actualSum = 0;\n    for (int num : nums) {\n        actualSum += num;\n    }\n    return totalSum - actualSum;\n}\nSystem.out.println(findMissingNumber(new int[]{1, 2, 4, 5, 6}));",
  "def count_occurrences(lst, target):\n    return lst.count(target)\nprint(count_occurrences([1, 2, 3, 4, 1, 2, 1], 1))": "public static int countOccurrences(ArrayList<Integer> lst, int target) {\n    int count = 0;\n    for (int num : lst) {\n        if (num == target) {\n            count++;\n        }\n    }\n    return count;\n}\nSystem.out.println(countOccurrences(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 1, 2, 1)), 1));",
  "def reverse_linked_list(head):\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev\n# Example usage:\n# reversed_list = reverse_linked_list(head)": "public ListNode reverseLinkedList(ListNode head) {\n    ListNode prev = null;\n    ListNode current = head;\n    while (current != null) {\n        ListNode nextNode = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextNode;\n    }\n    return prev;\n}\n\n// Example usage:\n// ListNode reversedList = reverseLinkedList(head);",
  "def remove_duplicates_linked_list(head):\n    current = head\n    while current and current.next:\n        if current.value == current.next.value:\n            current.next = current.next.next\n        else:\n            current = current.next\n    return head\n# Example usage:\n# new_head = remove_duplicates_linked_list(head)": "public ListNode removeDuplicatesLinkedList(ListNode head) {\n    ListNode current = head;\n    while (current != null && current.next != null) {\n        if (current.value == current.next.value) {\n            current.next = current.next.next;\n        } else {\n            current = current.next;\n        }\n    }\n    return head;\n}\n\n// Example usage:\n// ListNode newHead = removeDuplicatesLinkedList(head);",
  "def find_duplicate(nums):\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow\nprint(find_duplicate([1, 3, 4, 2, 2]))": "public static int findDuplicate(int[] nums) {\n    int slow = nums[0];\n    int fast = nums[nums[0]];\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    }\n    fast = 0;\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n    return slow;\n}\nSystem.out.println(findDuplicate(new int[]{1, 3, 4, 2, 2}));",
  "def is_valid_parentheses(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack\nprint(is_valid_parentheses('(){}[]'))": "public static boolean isValidParentheses(String s) {\n    Stack<Character> stack = new Stack<>();\n    HashMap<Character, Character> mapping = new HashMap<>();\n    mapping.put(')', '(');\n    mapping.put('}', '{');\n    mapping.put(']', '[');\n    for (char c : s.toCharArray()) {\n        if (mapping.containsKey(c)) {\n            char topElement = stack.empty() ? '#' : stack.pop();\n            if (topElement != mapping.get(c)) {\n                return false;\n            }\n        } else {\n            stack.push(c);\n        }\n    }\n    return stack.empty();\n}\nSystem.out.println(isValidParentheses(\"(){}[]\"));",
  "def find_maximum_depth(s):\n    max_depth = current_depth = 0\n    for char in s:\n        if char == '(':  \n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return max_depth\nprint(find_maximum_depth('( a ( b c ) d e ( f ) g ) h'))": "public static int findMaximumDepth(String s) {\n    int maxDepth = 0;\n    int currentDepth = 0;\n    for (char c : s.toCharArray()) {\n        if (c == '(') {\n            currentDepth++;\n            maxDepth = Math.max(maxDepth, currentDepth);\n        } else if (c == ')') {\n            currentDepth--;\n        }\n    }\n    return maxDepth;\n}\nSystem.out.println(findMaximumDepth(\"( a ( b c ) d e ( f ) g ) h\"));",
  "def generate_pascal_triangle(num_rows):\n    triangle = []\n    for i in range(num_rows):\n        row = [None] * (i + 1)\n        row[0], row[-1] = 1, 1\n        for j in range(1, len(row) - 1):\n            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        triangle.append(row)\n    return triangle\nprint(generate_pascal_triangle(5))": "public static List<List<Integer>> generatePascalTriangle(int numRows) {\n    List<List<Integer>> triangle = new ArrayList<>();\n    for (int i = 0; i < numRows; i++) {\n        List<Integer> row = new ArrayList<>(Collections.nCopies(i + 1, 0));\n        row.set(0, 1);\n        row.set(row.size() - 1, 1);\n        for (int j = 1; j < row.size() - 1; j++) {\n            row.set(j, triangle.get(i - 1).get(j - 1) + triangle.get(i - 1).get(j));\n        }\n        triangle.add(row);\n    }\n    return triangle;\n}\nSystem.out.println(generatePascalTriangle(5));",
  "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\nprint(is_power_of_two(16))": "public static boolean isPowerOfTwo(int n) {\n    return n > 0 && (n & (n - 1)) == 0;\n}\nSystem.out.println(isPowerOfTwo(16));",
  "def reverse_integer(x):\n    sign = 1 if x >= 0 else -1\n    x = abs(x)\n    reversed_x = 0\n    while x != 0:\n        digit = x % 10\n        reversed_x = reversed_x * 10 + digit\n        x //= 10\n    reversed_x *= sign\n    return reversed_x\nprint(reverse_integer(123))": "public static int reverseInteger(int x) {\n    int sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n    int reversedX = 0;\n    while (x != 0) {\n        int digit = x % 10;\n        reversedX = reversedX * 10 + digit;\n        x /= 10;\n    }\n    return reversedX * sign;\n}\nSystem.out.println(reverseInteger(123));",
  "def find_longest_common_prefix(strs):\n    if not strs:\n        return ''\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n    return shortest\nprint(find_longest_common_prefix(['flower', 'flow', 'flight']))": "public static String findLongestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return \"\";\n    }\n    String shortest = Arrays.stream(strs).min(Comparator.comparing(String::length)).get();\n    for (int i = 0; i < shortest.length(); i++) {\n        for (String str : strs) {\n            if (str.charAt(i) != shortest.charAt(i)) {\n                return shortest.substring(0, i);\n            }\n        }\n    }\n    return shortest;\n}\nSystem.out.println(findLongestCommonPrefix(new String[]{\"flower\", \"flow\", \"flight\"}));",
  "def find_single_number(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\nprint(find_single_number([4, 1, 2, 1, 2]))": "public static int findSingleNumber(int[] nums) {\n    int result = 0;\n    for (int num : nums) {\n        result ^= num;\n    }\n    return result;\n}\nSystem.out.println(findSingleNumber(new int[]{4, 1, 2, 1, 2}));",
  "def is_valid_sudoku(board):\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [set() for _ in range(9)]\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] != '.':\n                num = int(board[i][j])\n                box_index = (i // 3) * 3 + j // 3\n                if num in rows[i] or num in cols[j] or num in boxes[box_index]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[box_index].add(num)\n    return True\nprint(is_valid_sudoku([\n  ['5','3','.','.','7','.','.','.','.'],\n  ['6','.','.','1','9','5','.','.','.'],\n  ['.','9','8','.','.','.','.','6','.'],\n  ['8','.','.','.','6','.','.','.','3'],\n  ['4','.','.','8','.','3','.','.','1'],\n  ['7','.','.','.','2','.','.','.','6'],\n  ['.','6','.','.','.','.','2','8','.'],\n  ['.','.','.','4','1','9','.','.','5'],\n  ['.','.','.','.','8','.','.','7','9']\n]))": "public static boolean isValidSudoku(char[][] board) {\n    HashSet<Character>[] rows = new HashSet[9];\n    HashSet<Character>[] cols = new HashSet[9];\n    HashSet<Character>[] boxes = new HashSet[9];\n    for (int i = 0; i < 9; i++) {\n        rows[i] = new HashSet<>();\n        cols[i] = new HashSet<>();\n        boxes[i] = new HashSet<>();\n    }\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            char num = board[i][j];\n            if (num != '.') {\n                int boxIndex = (i / 3) * 3 + j / 3;\n                if (rows[i].contains(num) || cols[j].contains(num) || boxes[boxIndex].contains(num)) {\n                    return false;\n                }\n                rows[i].add(num);\n                cols[j].add(num);\n                boxes[boxIndex].add(num);\n            }\n        }\n    }\n    return true;\n}\nSystem.out.println(isValidSudoku(new char[][]{{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'}, {'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}}));",
  "def find_min_in_rotated_array(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < nums[right]:\n            right = mid\n        else:\n            left = mid + 1\n    return nums[left]\nprint(find_min_in_rotated_array([4, 5, 6, 7, 0, 1, 2]))": "public static int findMinInRotatedArray(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n    while (left < right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] < nums[right]) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return nums[left];\n}\nSystem.out.println(findMinInRotatedArray(new int[]{4, 5, 6, 7, 0, 1, 2}));",
  "def group_anagrams(strs):\n    anagrams = collections.defaultdict(list)\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        anagrams[sorted_s].append(s)\n    return list(anagrams.values())\nprint(group_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']))": "public static List<List<String>> groupAnagrams(String[] strs) {\n    HashMap<String, List<String>> anagrams = new HashMap<>();\n    for (String s : strs) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        String sortedS = new String(chars);\n        if (!anagrams.containsKey(sortedS)) {\n            anagrams.put(sortedS, new ArrayList<>());\n        }\n        anagrams.get(sortedS).add(s);\n    }\n    return new ArrayList<>(anagrams.values());\n}\nSystem.out.println(groupAnagrams(new String[]{\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"}));",
  "def find_all_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return list(substrings)\nprint(find_all_substrings('abc'))": "public static List<String> findAllSubstrings(String s) {\n    HashSet<String> substrings = new HashSet<>();\n    for (int i = 0; i < s.length(); i++) {\n        for (int j = i + 1; j <= s.length(); j++) {\n            substrings.add(s.substring(i, j));\n        }\n    }\n    return new ArrayList<>(substrings);\n}\nSystem.out.println(findAllSubstrings(\"abc\"));",
  "def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]\nprint(is_palindrome('A man, a plan, a canal: Panama'))": "public static boolean isPalindrome(String s) {\n    s = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n    return s.equals(new StringBuilder(s).reverse().toString());\n}\nSystem.out.println(isPalindrome(\"A man, a plan, a canal: Panama\"));",
  "def remove_element(nums, val):\n    i = 0\n    for num in nums:\n        if num != val:\n            nums[i] = num\n            i += 1\n    return i\nnums = [3, 2, 2, 3]\nval = 3\nnew_length = remove_element(nums, val)\nprint(new_length, nums[:new_length])": "public static int removeElement(int[] nums, int val) {\n    int i = 0;\n    for (int num : nums) {\n        if (num != val) {\n            nums[i++] = num;\n        }\n    }\n    return i;\n}\nint[] nums = {3, 2, 2, 3};\nint val = 3;\nint newLength = removeElement(nums, val);\nSystem.out.println(newLength + \" \" + Arrays.toString(Arrays.copyOfRange(nums, 0, newLength)));",
  "def find_median_sorted_arrays(nums1, nums2):\n    nums1.extend(nums2)\n    nums1.sort()\n    n = len(nums1)\n    if n % 2 == 0:\n        return (nums1[n // 2 - 1] + nums1[n // 2]) / 2\n    else:\n        return nums1[n // 2]\nprint(find_median_sorted_arrays([1, 3], [2]))": "public static double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    int[] merged = new int[nums1.length + nums2.length];\n    System.arraycopy(nums1, 0, merged, 0, nums1.length);\n    System.arraycopy(nums2, 0, merged, nums1.length, nums2.length);\n    Arrays.sort(merged);\n    int n = merged.length;\n    if (n % 2 == 0) {\n        return (merged[n / 2 - 1] + merged[n / 2]) / 2.0;\n    } else {\n        return merged[n / 2];\n    }\n}\nSystem.out.println(findMedianSortedArrays(new int[]{1, 3}, new int[]{2}));",
  "def is_valid_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\nprint(is_valid_number('3.14'))": "public static boolean isValidNumber(String s) {\n    try {\n        Double.parseDouble(s);\n        return true;\n    } catch (NumberFormatException e) {\n        return false;\n    }\n}\nSystem.out.println(isValidNumber(\"3.14\"));",
  "def longest_consecutive_sequence(nums):\n    nums_set = set(nums)\n    longest_sequence = 0\n    for num in nums_set:\n        if num - 1 not in nums_set:\n            current_num = num\n            current_sequence = 1\n            while current_num + 1 in nums_set:\n                current_num += 1\n                current_sequence += 1\n            longest_sequence = max(longest_sequence, current_sequence)\n    return longest_sequence\nprint(longest_consecutive_sequence([100, 4, 200, 1, 3, 2]))": "public static int longestConsecutiveSequence(int[] nums) {\n    HashSet<Integer> numsSet = new HashSet<>();\n    for (int num : nums) {\n        numsSet.add(num);\n    }\n    int longestSequence = 0;\n    for (int num : numsSet) {\n        if (!numsSet.contains(num - 1)) {\n            int currentNum = num;\n            int currentSequence = 1;\n            while (numsSet.contains(currentNum + 1)) {\n                currentNum++;\n                currentSequence++;\n            }\n            longestSequence = Math.max(longestSequence, currentSequence);\n        }\n    }\n    return longestSequence;\n}\nSystem.out.println(longestConsecutiveSequence(new int[]{100, 4, 200, 1, 3, 2}));",
  "def rotate_array(nums, k):\n    k %= len(nums)\n    nums[:] = nums[-k:] + nums[:-k]\nnums = [1, 2, 3, 4, 5, 6, 7]\nk = 3\nrotate_array(nums, k)\nprint(nums)": "public static void rotateArray(int[] nums, int k) {\n    k %= nums.length;\n    reverse(nums, 0, nums.length - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, nums.length - 1);\n}\n\npublic static void reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint[] nums = {1, 2, 3, 4, 5, 6, 7};\nint k = 3;\nrotateArray(nums, k);\nSystem.out.println(Arrays.toString(nums));",
  "def longest_substring_without_repeating(s):\n    start = max_length = 0\n    char_index = {}\n    for i, char in enumerate(s):\n        if char in char_index and start <= char_index[char]:\n            start = char_index[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        char_index[char] = i\n    return max_length\nprint(longest_substring_without_repeating('abcabcbb'))": "public static int longestSubstringWithoutRepeating(String s) {\n    int start = 0;\n    int maxLength = 0;\n    HashMap<Character, Integer> charIndex = new HashMap<>();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (charIndex.containsKey(c) && start <= charIndex.get(c)) {\n            start = charIndex.get(c) + 1;\n        } else {\n            maxLength = Math.max(maxLength, i - start + 1);\n        }\n        charIndex.put(c, i);\n    }\n    return maxLength;\n}\nSystem.out.println(longestSubstringWithoutRepeating(\"abcabcbb\"));",
  "def flatten(nested_list):\n    flattened = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flattened.extend(flatten(i))\n        else:\n            flattened.append(i)\n    return flattened\nprint(flatten([[1, 2], [3, 4], [5, 6]]))": "public static List<Integer> flatten(List<?> nestedList) {\n    List<Integer> flattened = new ArrayList<>();\n    for (Object i : nestedList) {\n        if (i instanceof List<?>) {\n            flattened.addAll(flatten((List<?>) i));\n        } else {\n            flattened.add((Integer) i);\n        }\n    }\n    return flattened;\n}\nSystem.out.println(flatten(new ArrayList<>(Arrays.asList(\n        new ArrayList<>(Arrays.asList(1, 2)),\n        new ArrayList<>(Arrays.asList(3, 4)),\n        new ArrayList<>(Arrays.asList(5, 6))\n))));",
  "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\nprint(transpose([[1, 2, 3], [4, 5, 6]]))": "public static int[][] transpose(int[][] matrix) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[][] result = new int[n][m];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n    return result;\n}\nSystem.out.println(Arrays.deepToString(transpose(new int[][]{{1, 2, 3}, {4, 5, 6}})));",
  "def is_armstrong(n):\n    digits = [int(digit) for digit in str(n)]\n    num_digits = len(digits)\n    armstrong_sum = sum([digit ** num_digits for digit in digits])\n    return armstrong_sum == n\nprint(is_armstrong(153))": "public static boolean isArmstrong(int n) {\n    String strN = String.valueOf(n);\n    int numDigits = strN.length();\n    int armstrongSum = 0;\n    for (int i = 0; i < numDigits; i++) {\n        int digit = Character.getNumericValue(strN.charAt(i));\n        armstrongSum += Math.pow(digit, numDigits);\n    }\n    return armstrongSum == n;\n}\nSystem.out.println(isArmstrong(153));",
  "def is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\nprint(is_perfect_square(16))": "public static boolean isPerfectSquare(int n) {\n    return (int) Math.pow((int) Math.sqrt(n), 2) == n;\n}\nSystem.out.println(isPerfectSquare(16));",
  "def count_words(s):\n    words = s.split()\n    return len(words)\nprint(count_words('Hello World'))": "public static int countWords(String s) {\n    String[] words = s.split(\"\\\\s+\");\n    return words.length;\n}\nSystem.out.println(countWords(\"Hello World\"));",
  "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\nprint(is_anagram('listen', 'silent'))": "public static boolean isAnagram(String s1, String s2) {\n    char[] str1 = s1.toCharArray();\n    char[] str2 = s2.toCharArray();\n    Arrays.sort(str1);\n    Arrays.sort(str2);\n    return Arrays.equals(str1, str2);\n}\nSystem.out.println(isAnagram(\"listen\", \"silent\"));",
  "def find_missing_number(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum\nprint(find_missing_number([1, 2, 4, 5, 6]))": "public static int findMissingNumber(int[] nums) {\n    int n = nums.length + 1;\n    int totalSum = n * (n + 1) / 2;\n    int actualSum = 0;\n    for (int num : nums) {\n        actualSum += num;\n    }\n    return totalSum - actualSum;\n}\nSystem.out.println(findMissingNumber(new int[]{1, 2, 4, 5, 6}));",
  "def count_occurrences(lst, target):\n    return lst.count(target)\nprint(count_occurrences([1, 2, 3, 4, 1, 2, 1], 1))": "public static int countOccurrences(ArrayList<Integer> lst, int target) {\n    int count = 0;\n    for (int num : lst) {\n        if (num == target) {\n            count++;\n        }\n    }\n    return count;\n}\nSystem.out.println(countOccurrences(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 1, 2, 1)), 1));",
  "def reverse_linked_list(head):\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev\n# Example usage:\n# reversed_list = reverse_linked_list(head)": "public ListNode reverseLinkedList(ListNode head) {\n    ListNode prev = null;\n    ListNode current = head;\n    while (current != null) {\n        ListNode nextNode = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextNode;\n    }\n    return prev;\n}\n\n// Example usage:\n// ListNode reversedList = reverseLinkedList(head);",
  "def remove_duplicates_linked_list(head):\n    current = head\n    while current and current.next:\n        if current.value == current.next.value:\n            current.next = current.next.next\n        else:\n            current = current.next\n    return head\n# Example usage:\n# new_head = remove_duplicates_linked_list(head)": "public ListNode removeDuplicatesLinkedList(ListNode head) {\n    ListNode current = head;\n    while (current != null && current.next != null) {\n        if (current.value == current.next.value) {\n            current.next = current.next.next;\n        } else {\n            current = current.next;\n        }\n    }\n    return head;\n}\n\n// Example usage:\n// ListNode newHead = removeDuplicatesLinkedList(head);",
  "def find_duplicate(nums):\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow\nprint(find_duplicate([1, 3, 4, 2, 2]))": "public static int findDuplicate(int[] nums) {\n    int slow = nums[0];\n    int fast = nums[nums[0]];\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    }\n    fast = 0;\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n    return slow;\n}\nSystem.out.println(findDuplicate(new int[]{1, 3, 4, 2, 2}));",
  "def is_valid_parentheses(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack\nprint(is_valid_parentheses('(){}[]'))": "public static boolean isValidParentheses(String s) {\n    Stack<Character> stack = new Stack<>();\n    HashMap<Character, Character> mapping = new HashMap<>();\n    mapping.put(')', '(');\n    mapping.put('}', '{');\n    mapping.put(']', '[');\n    for (char c : s.toCharArray()) {\n        if (mapping.containsKey(c)) {\n            char topElement = stack.empty() ? '#' : stack.pop();\n            if (topElement != mapping.get(c)) {\n                return false;\n            }\n        } else {\n            stack.push(c);\n        }\n    }\n    return stack.empty();\n}\nSystem.out.println(isValidParentheses(\"(){}[]\"));",
  "def find_maximum_depth(s):\n    max_depth = current_depth = 0\n    for char in s:\n        if char == '(':  \n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return max_depth\nprint(find_maximum_depth('( a ( b c ) d e ( f ) g ) h'))": "public static int findMaximumDepth(String s) {\n    int maxDepth = 0;\n    int currentDepth = 0;\n    for (char c : s.toCharArray()) {\n        if (c == '(') {\n            currentDepth++;\n            maxDepth = Math.max(maxDepth, currentDepth);\n        } else if (c == ')') {\n            currentDepth--;\n        }\n    }\n    return maxDepth;\n}\nSystem.out.println(findMaximumDepth(\"( a ( b c ) d e ( f ) g ) h\"));",
  "def generate_pascal_triangle(num_rows):\n    triangle = []\n    for i in range(num_rows):\n        row = [None] * (i + 1)\n        row[0], row[-1] = 1, 1\n        for j in range(1, len(row) - 1):\n            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        triangle.append(row)\n    return triangle\nprint(generate_pascal_triangle(5))": "public static List<List<Integer>> generatePascalTriangle(int numRows) {\n    List<List<Integer>> triangle = new ArrayList<>();\n    for (int i = 0; i < numRows; i++) {\n        List<Integer> row = new ArrayList<>(Collections.nCopies(i + 1, 0));\n        row.set(0, 1);\n        row.set(row.size() - 1, 1);\n        for (int j = 1; j < row.size() - 1; j++) {\n            row.set(j, triangle.get(i - 1).get(j - 1) + triangle.get(i - 1).get(j));\n        }\n        triangle.add(row);\n    }\n    return triangle;\n}\nSystem.out.println(generatePascalTriangle(5));",
  "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\nprint(is_power_of_two(16))": "public static boolean isPowerOfTwo(int n) {\n    return n > 0 && (n & (n - 1)) == 0;\n}\nSystem.out.println(isPowerOfTwo(16));",
  "def reverse_integer(x):\n    sign = 1 if x >= 0 else -1\n    x = abs(x)\n    reversed_x = 0\n    while x != 0:\n        digit = x % 10\n        reversed_x = reversed_x * 10 + digit\n        x //= 10\n    reversed_x *= sign\n    return reversed_x\nprint(reverse_integer(123))": "public static int reverseInteger(int x) {\n    int sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n    int reversedX = 0;\n    while (x != 0) {\n        int digit = x % 10;\n        reversedX = reversedX * 10 + digit;\n        x /= 10;\n    }\n    return reversedX * sign;\n}\nSystem.out.println(reverseInteger(123));",
  "def find_longest_common_prefix(strs):\n    if not strs:\n        return ''\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n    return shortest\nprint(find_longest_common_prefix(['flower', 'flow', 'flight']))": "public static String findLongestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return \"\";\n    }\n    String shortest = Arrays.stream(strs).min(Comparator.comparing(String::length)).get();\n    for (int i = 0; i < shortest.length(); i++) {\n        for (String str : strs) {\n            if (str.charAt(i) != shortest.charAt(i)) {\n                return shortest.substring(0, i);\n            }\n        }\n    }\n    return shortest;\n}\nSystem.out.println(findLongestCommonPrefix(new String[]{\"flower\", \"flow\", \"flight\"}));",
  "def find_single_number(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\nprint(find_single_number([4, 1, 2, 1, 2]))": "public static int findSingleNumber(int[] nums) {\n    int result = 0;\n    for (int num : nums) {\n        result ^= num;\n    }\n    return result;\n}\nSystem.out.println(findSingleNumber(new int[]{4, 1, 2, 1, 2}));",
  "def is_valid_sudoku(board):\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [set() for _ in range(9)]\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] != '.':\n                num = int(board[i][j])\n                box_index = (i // 3) * 3 + j // 3\n                if num in rows[i] or num in cols[j] or num in boxes[box_index]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[box_index].add(num)\n    return True\nprint(is_valid_sudoku([\n  ['5','3','.','.','7','.','.','.','.'],\n  ['6','.','.','1','9','5','.','.','.'],\n  ['.','9','8','.','.','.','.','6','.'],\n  ['8','.','.','.','6','.','.','.','3'],\n  ['4','.','.','8','.','3','.','.','1'],\n  ['7','.','.','.','2','.','.','.','6'],\n  ['.','6','.','.','.','.','2','8','.'],\n  ['.','.','.','4','1','9','.','.','5'],\n  ['.','.','.','.','8','.','.','7','9']\n]))": "public static boolean isValidSudoku(char[][] board) {\n    HashSet<Character>[] rows = new HashSet[9];\n    HashSet<Character>[] cols = new HashSet[9];\n    HashSet<Character>[] boxes = new HashSet[9];\n    for (int i = 0; i < 9; i++) {\n        rows[i] = new HashSet<>();\n        cols[i] = new HashSet<>();\n        boxes[i] = new HashSet<>();\n    }\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            char num = board[i][j];\n            if (num != '.') {\n                int boxIndex = (i / 3) * 3 + j / 3;\n                if (rows[i].contains(num) || cols[j].contains(num) || boxes[boxIndex].contains(num)) {\n                    return false;\n                }\n                rows[i].add(num);\n                cols[j].add(num);\n                boxes[boxIndex].add(num);\n            }\n        }\n    }\n    return true;\n}\nSystem.out.println(isValidSudoku(new char[][]{{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'}, {'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}}));",
  "def find_min_in_rotated_array(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < nums[right]:\n            right = mid\n        else:\n            left = mid + 1\n    return nums[left]\nprint(find_min_in_rotated_array([4, 5, 6, 7, 0, 1, 2]))": "public static int findMinInRotatedArray(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n    while (left < right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] < nums[right]) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return nums[left];\n}\nSystem.out.println(findMinInRotatedArray(new int[]{4, 5, 6, 7, 0, 1, 2}));",
  "def group_anagrams(strs):\n    anagrams = collections.defaultdict(list)\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        anagrams[sorted_s].append(s)\n    return list(anagrams.values())\nprint(group_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']))": "public static List<List<String>> groupAnagrams(String[] strs) {\n    HashMap<String, List<String>> anagrams = new HashMap<>();\n    for (String s : strs) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        String sortedS = new String(chars);\n        if (!anagrams.containsKey(sortedS)) {\n            anagrams.put(sortedS, new ArrayList<>());\n        }\n        anagrams.get(sortedS).add(s);\n    }\n    return new ArrayList<>(anagrams.values());\n}\nSystem.out.println(groupAnagrams(new String[]{\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"}));",
  "def find_all_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return list(substrings)\nprint(find_all_substrings('abc'))": "public static List<String> findAllSubstrings(String s) {\n    HashSet<String> substrings = new HashSet<>();\n    for (int i = 0; i < s.length(); i++) {\n        for (int j = i + 1; j <= s.length(); j++) {\n            substrings.add(s.substring(i, j));\n        }\n    }\n    return new ArrayList<>(substrings);\n}\nSystem.out.println(findAllSubstrings(\"abc\"));",
  "def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]\nprint(is_palindrome('A man, a plan, a canal: Panama'))": "public static boolean isPalindrome(String s) {\n    s = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n    return s.equals(new StringBuilder(s).reverse().toString());\n}\nSystem.out.println(isPalindrome(\"A man, a plan, a canal: Panama\"));",
  "def remove_element(nums, val):\n    i = 0\n    for num in nums:\n        if num != val:\n            nums[i] = num\n            i += 1\n    return i\nnums = [3, 2, 2, 3]\nval = 3\nnew_length = remove_element(nums, val)\nprint(new_length, nums[:new_length])": "public static int removeElement(int[] nums, int val) {\n    int i = 0;\n    for (int num : nums) {\n        if (num != val) {\n            nums[i++] = num;\n        }\n    }\n    return i;\n}\nint[] nums = {3, 2, 2, 3};\nint val = 3;\nint newLength = removeElement(nums, val);\nSystem.out.println(newLength + \" \" + Arrays.toString(Arrays.copyOfRange(nums, 0, newLength)));",
  "def find_median_sorted_arrays(nums1, nums2):\n    nums1.extend(nums2)\n    nums1.sort()\n    n = len(nums1)\n    if n % 2 == 0:\n        return (nums1[n // 2 - 1] + nums1[n // 2]) / 2\n    else:\n        return nums1[n // 2]\nprint(find_median_sorted_arrays([1, 3], [2]))": "public static double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    int[] merged = new int[nums1.length + nums2.length];\n    System.arraycopy(nums1, 0, merged, 0, nums1.length);\n    System.arraycopy(nums2, 0, merged, nums1.length, nums2.length);\n    Arrays.sort(merged);\n    int n = merged.length;\n    if (n % 2 == 0) {\n        return (merged[n / 2 - 1] + merged[n / 2]) / 2.0;\n    } else {\n        return merged[n / 2];\n    }\n}\nSystem.out.println(findMedianSortedArrays(new int[]{1, 3}, new int[]{2}));",
  "def is_valid_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\nprint(is_valid_number('3.14'))": "public static boolean isValidNumber(String s) {\n    try {\n        Double.parseDouble(s);\n        return true;\n    } catch (NumberFormatException e) {\n        return false;\n    }\n}\nSystem.out.println(isValidNumber(\"3.14\"));",
  "def longest_consecutive_sequence(nums):\n    nums_set = set(nums)\n    longest_sequence = 0\n    for num in nums_set:\n        if num - 1 not in nums_set:\n            current_num = num\n            current_sequence = 1\n            while current_num + 1 in nums_set:\n                current_num += 1\n                current_sequence += 1\n            longest_sequence = max(longest_sequence, current_sequence)\n    return longest_sequence\nprint(longest_consecutive_sequence([100, 4, 200, 1, 3, 2]))": "public static int longestConsecutiveSequence(int[] nums) {\n    HashSet<Integer> numsSet = new HashSet<>();\n    for (int num : nums) {\n        numsSet.add(num);\n    }\n    int longestSequence = 0;\n    for (int num : numsSet) {\n        if (!numsSet.contains(num - 1)) {\n            int currentNum = num;\n            int currentSequence = 1;\n            while (numsSet.contains(currentNum + 1)) {\n                currentNum++;\n                currentSequence++;\n            }\n            longestSequence = Math.max(longestSequence, currentSequence);\n        }\n    }\n    return longestSequence;\n}\nSystem.out.println(longestConsecutiveSequence(new int[]{100, 4, 200, 1, 3, 2}));",
  "def rotate_array(nums, k):\n    k %= len(nums)\n    nums[:] = nums[-k:] + nums[:-k]\nnums = [1, 2, 3, 4, 5, 6, 7]\nk = 3\nrotate_array(nums, k)\nprint(nums)": "public static void rotateArray(int[] nums, int k) {\n    k %= nums.length;\n    reverse(nums, 0, nums.length - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, nums.length - 1);\n}\n\npublic static void reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint[] nums = {1, 2, 3, 4, 5, 6, 7};\nint k = 3;\nrotateArray(nums, k);\nSystem.out.println(Arrays.toString(nums));",
  "def longest_substring_without_repeating(s):\n    start = max_length = 0\n    char_index = {}\n    for i, char in enumerate(s):\n        if char in char_index and start <= char_index[char]:\n            start = char_index[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        char_index[char] = i\n    return max_length\nprint(longest_substring_without_repeating('abcabcbb'))": "public static int longestSubstringWithoutRepeating(String s) {\n    int start = 0;\n    int maxLength = 0;\n    HashMap<Character, Integer> charIndex = new HashMap<>();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (charIndex.containsKey(c) && start <= charIndex.get(c)) {\n            start = charIndex.get(c) + 1;\n        } else {\n            maxLength = Math.max(maxLength, i - start + 1);\n        }\n        charIndex.put(c, i);\n    }\n    return maxLength;\n}\nSystem.out.println(longestSubstringWithoutRepeating(\"abcabcbb\"));",
  "def flatten(nested_list):\n    flattened = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flattened.extend(flatten(i))\n        else:\n            flattened.append(i)\n    return flattened\nprint(flatten([[1, 2], [3, 4], [5, 6]]))": "public static List<Integer> flatten(List<?> nestedList) {\n    List<Integer> flattened = new ArrayList<>();\n    for (Object i : nestedList) {\n        if (i instanceof List<?>) {\n            flattened.addAll(flatten((List<?>) i));\n        } else {\n            flattened.add((Integer) i);\n        }\n    }\n    return flattened;\n}\nSystem.out.println(flatten(new ArrayList<>(Arrays.asList(\n        new ArrayList<>(Arrays.asList(1, 2)),\n        new ArrayList<>(Arrays.asList(3, 4)),\n        new ArrayList<>(Arrays.asList(5, 6))\n))));",
  "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\nprint(transpose([[1, 2, 3], [4, 5, 6]]))": "public static int[][] transpose(int[][] matrix) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[][] result = new int[n][m];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n    return result;\n}\nSystem.out.println(Arrays.deepToString(transpose(new int[][]{{1, 2, 3}, {4, 5, 6}})));",
  "def is_armstrong(n):\n    digits = [int(digit) for digit in str(n)]\n    num_digits = len(digits)\n    armstrong_sum = sum([digit ** num_digits for digit in digits])\n    return armstrong_sum == n\nprint(is_armstrong(153))": "public static boolean isArmstrong(int n) {\n    String strN = String.valueOf(n);\n    int numDigits = strN.length();\n    int armstrongSum = 0;\n    for (int i = 0; i < numDigits; i++) {\n        int digit = Character.getNumericValue(strN.charAt(i));\n        armstrongSum += Math.pow(digit, numDigits);\n    }\n    return armstrongSum == n;\n}\nSystem.out.println(isArmstrong(153));",
  "def is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\nprint(is_perfect_square(16))": "public static boolean isPerfectSquare(int n) {\n    return (int) Math.pow((int) Math.sqrt(n), 2) == n;\n}\nSystem.out.println(isPerfectSquare(16));",
  "def count_words(s):\n    words = s.split()\n    return len(words)\nprint(count_words('Hello World'))": "public static int countWords(String s) {\n    String[] words = s.split(\"\\\\s+\");\n    return words.length;\n}\nSystem.out.println(countWords(\"Hello World\"));",
  "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\nprint(is_anagram('listen', 'silent'))": "public static boolean isAnagram(String s1, String s2) {\n    char[] str1 = s1.toCharArray();\n    char[] str2 = s2.toCharArray();\n    Arrays.sort(str1);\n    Arrays.sort(str2);\n    return Arrays.equals(str1, str2);\n}\nSystem.out.println(isAnagram(\"listen\", \"silent\"));",
  "def find_missing_number(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum\nprint(find_missing_number([1, 2, 4, 5, 6]))": "public static int findMissingNumber(int[] nums) {\n    int n = nums.length + 1;\n    int totalSum = n * (n + 1) / 2;\n    int actualSum = 0;\n    for (int num : nums) {\n        actualSum += num;\n    }\n    return totalSum - actualSum;\n}\nSystem.out.println(findMissingNumber(new int[]{1, 2, 4, 5, 6}));",
  "def count_occurrences(lst, target):\n    return lst.count(target)\nprint(count_occurrences([1, 2, 3, 4, 1, 2, 1], 1))": "public static int countOccurrences(ArrayList<Integer> lst, int target) {\n    int count = 0;\n    for (int num : lst) {\n        if (num == target) {\n            count++;\n        }\n    }\n    return count;\n}\nSystem.out.println(countOccurrences(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 1, 2, 1)), 1));",
  "def reverse_linked_list(head):\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev\n# Example usage:\n# reversed_list = reverse_linked_list(head)": "public ListNode reverseLinkedList(ListNode head) {\n    ListNode prev = null;\n    ListNode current = head;\n    while (current != null) {\n        ListNode nextNode = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextNode;\n    }\n    return prev;\n}\n\n// Example usage:\n// ListNode reversedList = reverseLinkedList(head);",
  "def remove_duplicates_linked_list(head):\n    current = head\n    while current and current.next:\n        if current.value == current.next.value:\n            current.next = current.next.next\n        else:\n            current = current.next\n    return head\n# Example usage:\n# new_head = remove_duplicates_linked_list(head)": "public ListNode removeDuplicatesLinkedList(ListNode head) {\n    ListNode current = head;\n    while (current != null && current.next != null) {\n        if (current.value == current.next.value) {\n            current.next = current.next.next;\n        } else {\n            current = current.next;\n        }\n    }\n    return head;\n}\n\n// Example usage:\n// ListNode newHead = removeDuplicatesLinkedList(head);",
}
